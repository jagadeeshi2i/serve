{
	"info": {
		"_postman_id": "145e3f57-b049-4488-bd58-b5bba80a5a5e",
		"name": "inference_kfv2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [{
		"name": "Model Zoo - Register Model",
		"event": [{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": ["pm.test(\"Successful POST request\", function () {", "    pm.expect(pm.response.code).to.be.oneOf([200]);", "});"]
			}
		}],
		"id": "a1082100-f443-46ca-8205-30483336b9b7",
		"request": {
			"method": "POST",
			"header": [],
			"url": {
				"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url={{url}}&model_name={{model_name}}&initial_workers={{worker}}&synchronous={{synchronous}}",
				"protocol": "{{protocol}}",
				"host": ["{{hostname}}"],
				"port": "{{mgmt-port}}",
				"path": ["models"],
				"query": [{
					"key": "url",
					"value": "{{url}}"
				}, {
					"key": "model_name",
					"value": "{{model_name}}"
				}, {
					"key": "initial_workers",
					"value": "{{worker}}"
				}, {
					"key": "synchronous",
					"value": "{{synchronous}}"
				}]
			}
		},
		"response": []
	}, {
		"name": "Model Zoo - Inference Model",
		"event": [{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": ["var type_response = pm.iterationData.get(\"content-type\");", "validators = {", "    image_classification: validate_image_classification,", "    default_json: validate_default", "};", "", "pm.test(\"Successful POST request\", function() {", "    pm.expect(pm.response.code).to.be.oneOf([200]);", "});", "", "if (type_response === \"text/plain\") {", "    pm.test(\"Test expected TEXT response\", function() {", "        pm.response.to.have.body(pm.iterationData.get(\"expected\"));", "    });", "", "} else if (type_response === \"application/json\") {", "    if (pm.iterationData.has(\"validator\")) {", "        var validator = pm.iterationData.get(\"validator\");       ", "    } else {", "        var  validator = \"default_json\";", "    }", "    pm.test(\"Test expected JSON response\", function() {", "        var actual_obj = pm.response.json();", "        var expected_obj = pm.iterationData.get(\"expected\");", "        pm.expect(validators[validator](actual_obj, expected_obj)).to.be.true;", "    });", "", "}", "", "function get_tolerance_value(expected_val) {", "    var tolerance_percent = pm.iterationData.get(\"tolerance\");", "    return (expected_val * tolerance_percent) / 100;", "}", "", "function validate_image_classification(actual_obj, expected_obj) {", "    if (_.size(expected_obj) != _.size(actual_obj)) {", "        return false;", "    }", "", "    ", "    if (!_.isEqual(_.keys(expected_obj).sort(), _.keys(actual_obj).sort())) {", "        return false;", "    }", "", "", "    for (const key in (expected_obj)) {", "        expected_val = expected_obj[key]", "        actual_val = actual_obj[key]", "        ", "        tolerance_value = get_tolerance_value(expected_val);", "        if (!(Math.abs(expected_val - actual_val) < tolerance_value)) {", "            return false;", "        }", "    }", "    return true;", "}", "", "/* Simple and nested json object can be compared using validate_default when key and value are constant.", "-Notes-", "The order of keys within an object may change.", "If the output is array of objects then the objects compared are positional and cannot change order.", "*/", "function validate_default(actual_obj, expected_obj) {", "    return _.isEqual(actual_obj, expected_obj);", "}", ""]
			}
		}],
		"id": "fd46264f-c314-4798-8988-ad505ce8d8f0",
		"protocolProfileBehavior": {
			"disabledSystemHeaders": {
				"content-type": true
			}
		},
		"request": {
			"method": "POST",
			"header": [],
			"body": {
				"mode": "file",
				"file": {
					"src": "{{file}}"
				}
			},
			"url": "{{protocol}}://{{hostname}}:{{pred-port}}/v2/models/{{model_name}}/infer"
		},
		"response": []
	}, {
		"name": "Model Zoo - Explanations Model",
		"event": [{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": ["var type_response = pm.iterationData.get(\"content-type\");", "validators = {", "    image_classification: validate_image_classification,", "    default_json: validate_default", "};", "", "pm.test(\"Successful POST request\", function() {", "    pm.expect(pm.response.code).to.be.oneOf([200]);", "});", "", "if (type_response === \"text/plain\") {", "    pm.test(\"Test expected TEXT response\", function() {", "        pm.response.to.have.body(pm.iterationData.get(\"expected_explain\"));", "    });", "", "} else if (type_response === \"application/json\") {", "    if (pm.iterationData.has(\"validator\")) {", "        var validator = pm.iterationData.get(\"validator\");       ", "    } else {", "        var  validator = \"default_json\";", "    }", "    pm.test(\"Test expected JSON response\", function() {", "        var actual_obj = pm.response.json();", "        var expected_obj = pm.iterationData.get(\"expected_explain\");", "        pm.expect(validators[validator](actual_obj, expected_obj)).to.be.true;", "    });", "", "}", "", "function get_tolerance_value(expected_val) {", "    var tolerance_percent = pm.iterationData.get(\"tolerance\");", "    return (expected_val * tolerance_percent) / 100;", "}", "", "function validate_image_classification(actual_obj, expected_obj) {", "    if (_.size(expected_obj) != _.size(actual_obj)) {", "        return false;", "    }", "", "    ", "    if (!_.isEqual(_.keys(expected_obj).sort(), _.keys(actual_obj).sort())) {", "        return false;", "    }", "", "", "    for (const key in (expected_obj)) {", "        expected_val = expected_obj[key]", "        actual_val = actual_obj[key]", "        ", "        tolerance_value = get_tolerance_value(expected_val);", "        if (!(Math.abs(expected_val - actual_val) < tolerance_value)) {", "            return false;", "        }", "    }", "    return true;", "}", "", "/* Simple and nested json object can be compared using validate_default when key and value are constant.", "-Notes-", "The order of keys within an object may change.", "If the output is array of objects then the objects compared are positional and cannot change order.", "*/", "function validate_default(actual_obj, expected_obj) {", "    return _.isEqual(actual_obj, expected_obj);", "}", ""]
			}
		}],
		"id": "c63e90f8-19a2-4e50-b21c-1dfb3625d209",
		"protocolProfileBehavior": {
			"disabledSystemHeaders": {
				"content-type": true
			}
		},
		"request": {
			"method": "POST",
			"header": [],
			"body": {
				"mode": "file",
				"file": {
					"src": "{{file}}"
				}
			},
			"url": "{{protocol}}://{{hostname}}:{{pred-port}}/v2/models/{{model_name}}/explain"
		},
		"response": []
	}, {
		"name": "Model Zoo - Unregister model",
		"event": [{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": ["pm.test(\"Successful DELETE request\", function () {", "    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);", "});"]
			}
		}],
		"id": "dd9f4b28-2061-4567-96fe-8971fd9681da",
		"request": {
			"method": "DELETE",
			"header": [],
			"url": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/{{model_name}}"
		},
		"response": []
	}, {
		"name": "Model Zoo - Model Metrics",
		"event": [{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": ["pm.test(\"Successful GET request\", function () {", "    let pattern = new RegExp('ts_inference_latency_microseconds{uuid=\"[\\\\w]{8}(-[\\\\w]{4}){3}-[\\\\w]{12}\",model_name=\"'+pm.variables.get(\"model_name\"));", "    pm.expect(pm.response.text()).to.match(pattern);", "});"]
			}
		}],
		"id": "d579f3a6-5b36-4dfa-8ad6-9ca1c6769ecc",
		"request": {
			"method": "GET",
			"header": [],
			"url": "http://localhost:8082/metrics"
		},
		"response": []
	}]
}